(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{670:function(t,e,v){"use strict";v.r(e);var a=v(1),_=Object(a.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"methods-and-types"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#methods-and-types"}},[t._v("#")]),t._v(" Methods and Types")]),t._v(" "),v("h2",{attrs:{id:"overview"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[t._v("#")]),t._v(" Overview")]),t._v(" "),v("p",[t._v("The ABCI message types are defined in a "),v("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/master/proto/tendermint/abci/types.proto",target:"_blank",rel:"noopener noreferrer"}},[t._v("protobuf\nfile"),v("OutboundLink")],1),t._v(".")]),t._v(" "),v("p",[t._v("ABCI methods are split across four separate ABCI "),v("em",[t._v("connections")]),t._v(":")]),t._v(" "),v("ul",[v("li",[t._v("Consensus connection: "),v("code",[t._v("InitChain")]),t._v(", "),v("code",[t._v("BeginBlock")]),t._v(", "),v("code",[t._v("DeliverTx")]),t._v(", "),v("code",[t._v("EndBlock")]),t._v(", "),v("code",[t._v("Commit")])]),t._v(" "),v("li",[t._v("Mempool connection: "),v("code",[t._v("CheckTx")])]),t._v(" "),v("li",[t._v("Info connection: "),v("code",[t._v("Info")]),t._v(", "),v("code",[t._v("Query")])]),t._v(" "),v("li",[t._v("Snapshot connection: "),v("code",[t._v("ListSnapshots")]),t._v(", "),v("code",[t._v("LoadSnapshotChunk")]),t._v(", "),v("code",[t._v("OfferSnapshot")]),t._v(", "),v("code",[t._v("ApplySnapshotChunk")])])]),t._v(" "),v("p",[t._v("The consensus connection is driven by a consensus protocol and is responsible\nfor block execution.")]),t._v(" "),v("p",[t._v("The mempool connection is for validating new transactions, before they're\nshared or included in a block.")]),t._v(" "),v("p",[t._v("The info connection is for initialization and for queries from the user.")]),t._v(" "),v("p",[t._v("The snapshot connection is for serving and restoring "),v("RouterLink",{attrs:{to:"/spec/abci/apps.html#state-sync"}},[t._v("state sync snapshots")]),t._v(".")],1),t._v(" "),v("p",[t._v("Additionally, there is a "),v("code",[t._v("Flush")]),t._v(" method that is called on every connection,\nand an "),v("code",[t._v("Echo")]),t._v(" method that is just for debugging.")]),t._v(" "),v("p",[t._v("More details on managing state across connections can be found in the section on\n"),v("RouterLink",{attrs:{to:"/spec/abci/apps.html"}},[t._v("ABCI Applications")]),t._v(".")],1),t._v(" "),v("h2",{attrs:{id:"errors"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#errors"}},[t._v("#")]),t._v(" Errors")]),t._v(" "),v("p",[t._v("Some methods ("),v("code",[t._v("Echo, Info, InitChain, BeginBlock, EndBlock, Commit")]),t._v("),\ndon't return errors because an error would indicate a critical failure\nin the application and there's nothing Tendermint can do. The problem\nshould be addressed and both Tendermint and the application restarted.")]),t._v(" "),v("p",[t._v("All other methods ("),v("code",[t._v("Query, CheckTx, DeliverTx")]),t._v(") return an\napplication-specific response "),v("code",[t._v("Code uint32")]),t._v(", where only "),v("code",[t._v("0")]),t._v(" is reserved\nfor "),v("code",[t._v("OK")]),t._v(".")]),t._v(" "),v("p",[t._v("Finally, "),v("code",[t._v("Query")]),t._v(", "),v("code",[t._v("CheckTx")]),t._v(", and "),v("code",[t._v("DeliverTx")]),t._v(" include a "),v("code",[t._v("Codespace string")]),t._v(", whose\nintended use is to disambiguate "),v("code",[t._v("Code")]),t._v(" values returned by different domains of the\napplication. The "),v("code",[t._v("Codespace")]),t._v(" is a namespace for the "),v("code",[t._v("Code")]),t._v(".")]),t._v(" "),v("h2",{attrs:{id:"events"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[t._v("#")]),t._v(" Events")]),t._v(" "),v("p",[t._v("Some methods ("),v("code",[t._v("CheckTx, BeginBlock, DeliverTx, EndBlock")]),t._v(")\ninclude an "),v("code",[t._v("Events")]),t._v(" field in their "),v("code",[t._v("Response*")]),t._v(". Each event contains a type and a\nlist of attributes, which are key-value pairs denoting something about what happened\nduring the method's execution.")]),t._v(" "),v("p",[t._v("Events can be used to index transactions and blocks according to what happened\nduring their execution. Note that the set of events returned for a block from\n"),v("code",[t._v("BeginBlock")]),t._v(" and "),v("code",[t._v("EndBlock")]),t._v(" are merged. In case both methods return the same\ntag, only the value defined in "),v("code",[t._v("EndBlock")]),t._v(" is used.")]),t._v(" "),v("p",[t._v("Each event has a "),v("code",[t._v("type")]),t._v(" which is meant to categorize the event for a particular\n"),v("code",[t._v("Response*")]),t._v(" or tx. A "),v("code",[t._v("Response*")]),t._v(" or tx may contain multiple events with duplicate\n"),v("code",[t._v("type")]),t._v(" values, where each distinct entry is meant to categorize attributes for a\nparticular event. Every key and value in an event's attributes must be UTF-8\nencoded strings along with the event type itself.")]),t._v(" "),v("tm-code-block",{staticClass:"codeblock",attrs:{language:"protobuf",base64:"bWVzc2FnZSBFdmVudCB7CiAgc3RyaW5nICAgICAgICAgICAgICAgICAgdHlwZSAgICAgICA9IDE7CiAgcmVwZWF0ZWQgRXZlbnRBdHRyaWJ1dGUgYXR0cmlidXRlcyA9IDI7Cn0K"}}),t._v(" "),v("p",[t._v("The attributes of an "),v("code",[t._v("Event")]),t._v(" consist of a "),v("code",[t._v("key")]),t._v(", "),v("code",[t._v("value")]),t._v(" and a "),v("code",[t._v("index")]),t._v(". The index field notifies the indexer within Tendermint to index the event. This field is non-deterministic and will vary across different nodes in the network.")]),t._v(" "),v("tm-code-block",{staticClass:"codeblock",attrs:{language:"protobuf",base64:"bWVzc2FnZSBFdmVudEF0dHJpYnV0ZSB7CiAgYnl0ZXMga2V5ICAgPSAxOwogIGJ5dGVzIHZhbHVlID0gMjsKICBib29sICBpbmRleCA9IDM7ICAvLyBub25kZXRlcm1pbmlzdGljCn0K"}}),t._v(" "),v("p",[t._v("Example:")]),t._v(" "),v("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:"IGFiY2kuUmVzcG9uc2VEZWxpdmVyVHh7CiAgLy8gLi4uCiBFdmVudHM6IFtdYWJjaS5FdmVudHsKICB7CiAgIFR5cGU6ICZxdW90O3ZhbGlkYXRvci5wcm92aXNpb25zJnF1b3Q7LAogICBBdHRyaWJ1dGVzOiBbXWFiY2kuRXZlbnRBdHRyaWJ1dGV7CiAgICBhYmNpLkV2ZW50QXR0cmlidXRle0tleTogW11ieXRlKCZxdW90O2FkZHJlc3MmcXVvdDspLCBWYWx1ZTogW11ieXRlKCZxdW90Oy4uLiZxdW90OyksIEluZGV4OiB0cnVlfSwKICAgIGFiY2kuRXZlbnRBdHRyaWJ1dGV7S2V5OiBbXWJ5dGUoJnF1b3Q7YW1vdW50JnF1b3Q7KSwgVmFsdWU6IFtdYnl0ZSgmcXVvdDsuLi4mcXVvdDspLCBJbmRleDogdHJ1ZX0sCiAgICBhYmNpLkV2ZW50QXR0cmlidXRle0tleTogW11ieXRlKCZxdW90O2JhbGFuY2UmcXVvdDspLCBWYWx1ZTogW11ieXRlKCZxdW90Oy4uLiZxdW90OyksIEluZGV4OiB0cnVlfSwKICAgfSwKICB9LAogIHsKICAgVHlwZTogJnF1b3Q7dmFsaWRhdG9yLnByb3Zpc2lvbnMmcXVvdDssCiAgIEF0dHJpYnV0ZXM6IFtdYWJjaS5FdmVudEF0dHJpYnV0ZXsKICAgIGFiY2kuRXZlbnRBdHRyaWJ1dGV7S2V5OiBbXWJ5dGUoJnF1b3Q7YWRkcmVzcyZxdW90OyksIFZhbHVlOiBbXWJ5dGUoJnF1b3Q7Li4uJnF1b3Q7KSwgSW5kZXg6IHRydWV9LAogICAgYWJjaS5FdmVudEF0dHJpYnV0ZXtLZXk6IFtdYnl0ZSgmcXVvdDthbW91bnQmcXVvdDspLCBWYWx1ZTogW11ieXRlKCZxdW90Oy4uLiZxdW90OyksIEluZGV4OiBmYWxzZX0sCiAgICBhYmNpLkV2ZW50QXR0cmlidXRle0tleTogW11ieXRlKCZxdW90O2JhbGFuY2UmcXVvdDspLCBWYWx1ZTogW11ieXRlKCZxdW90Oy4uLiZxdW90OyksIEluZGV4OiBmYWxzZX0sCiAgIH0sCiAgfSwKICB7CiAgIFR5cGU6ICZxdW90O3ZhbGlkYXRvci5zbGFzaGVkJnF1b3Q7LAogICBBdHRyaWJ1dGVzOiBbXWFiY2kuRXZlbnRBdHRyaWJ1dGV7CiAgICBhYmNpLkV2ZW50QXR0cmlidXRle0tleTogW11ieXRlKCZxdW90O2FkZHJlc3MmcXVvdDspLCBWYWx1ZTogW11ieXRlKCZxdW90Oy4uLiZxdW90OyksIEluZGV4OiBmYWxzZX0sCiAgICBhYmNpLkV2ZW50QXR0cmlidXRle0tleTogW11ieXRlKCZxdW90O2Ftb3VudCZxdW90OyksIFZhbHVlOiBbXWJ5dGUoJnF1b3Q7Li4uJnF1b3Q7KSwgSW5kZXg6IHRydWV9LAogICAgYWJjaS5FdmVudEF0dHJpYnV0ZXtLZXk6IFtdYnl0ZSgmcXVvdDtyZWFzb24mcXVvdDspLCBWYWx1ZTogW11ieXRlKCZxdW90Oy4uLiZxdW90OyksIEluZGV4OiB0cnVlfSwKICAgfSwKICB9LAogIC8vIC4uLgogfSwKfQo="}}),t._v(" "),v("h2",{attrs:{id:"evidencetype"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#evidencetype"}},[t._v("#")]),t._v(" EvidenceType")]),t._v(" "),v("p",[t._v("A part of Tendermint's security model is the use of evidence which serves as proof of\nmalicious behaviour by a network participant. It is the responsibility of Tendermint\nto detect such malicious behaviour, to gossip this and commit it to the chain and once\nverified by all validators to pass it on to the application through the ABCI. It is the\nresponsibility of the application then to handle the evidence and exercise punishment.")]),t._v(" "),v("p",[t._v("EvidenceType has the following protobuf format:")]),t._v(" "),v("tm-code-block",{staticClass:"codeblock",attrs:{language:"proto",base64:"ZW51bSBFdmlkZW5jZVR5cGUgewogIFVOS05PV04gICAgICAgICAgICAgICA9IDA7CiAgRFVQTElDQVRFX1ZPVEUgICAgICAgID0gMTsKICBMSUdIVF9DTElFTlRfQVRUQUNLICAgPSAyOwp9Cg=="}}),t._v(" "),v("p",[t._v("There are two forms of evidence: Duplicate Vote and Light Client Attack. More\ninformation can be found in either "),v("a",{attrs:{href:"https://github.com/tendermint/spec/blob/master/spec/core/data_structures.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("data structures"),v("OutboundLink")],1),t._v("\nor "),v("a",{attrs:{href:"https://github.com/tendermint/spec/blob/master/spec/light-client/accountability.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("accountability"),v("OutboundLink")],1)]),t._v(" "),v("h2",{attrs:{id:"determinism"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#determinism"}},[t._v("#")]),t._v(" Determinism")]),t._v(" "),v("p",[t._v("ABCI applications must implement deterministic finite-state machines to be\nsecurely replicated by the Tendermint consensus. This means block execution\nover the Consensus Connection must be strictly deterministic: given the same\nordered set of requests, all nodes will compute identical responses, for all\nBeginBlock, DeliverTx, EndBlock, and Commit. This is critical, because the\nresponses are included in the header of the next block, either via a Merkle root\nor directly, so all nodes must agree on exactly what they are.")]),t._v(" "),v("p",[t._v("For this reason, it is recommended that applications not be exposed to any\nexternal user or process except via the ABCI connections to a consensus engine\nlike Tendermint Core. The application must only change its state based on input\nfrom block execution (BeginBlock, DeliverTx, EndBlock, Commit), and not through\nany other kind of request. This is the only way to ensure all nodes see the same\ntransactions and compute the same results.")]),t._v(" "),v("p",[t._v("If there is some non-determinism in the state machine, consensus will eventually\nfail as nodes disagree over the correct values for the block header. The\nnon-determinism must be fixed and the nodes restarted.")]),t._v(" "),v("p",[t._v("Sources of non-determinism in applications may include:")]),t._v(" "),v("ul",[v("li",[t._v("Hardware failures\n"),v("ul",[v("li",[t._v("Cosmic rays, overheating, etc.")])])]),t._v(" "),v("li",[t._v("Node-dependent state\n"),v("ul",[v("li",[t._v("Random numbers")]),t._v(" "),v("li",[t._v("Time")])])]),t._v(" "),v("li",[t._v("Underspecification\n"),v("ul",[v("li",[t._v("Library version changes")]),t._v(" "),v("li",[t._v("Race conditions")]),t._v(" "),v("li",[t._v("Floating point numbers")]),t._v(" "),v("li",[t._v("JSON serialization")]),t._v(" "),v("li",[t._v("Iterating through hash-tables/maps/dictionaries")])])]),t._v(" "),v("li",[t._v("External Sources\n"),v("ul",[v("li",[t._v("Filesystem")]),t._v(" "),v("li",[t._v("Network calls (eg. some external REST API service)")])])])]),t._v(" "),v("p",[t._v("See "),v("a",{attrs:{href:"https://github.com/tendermint/abci/issues/56",target:"_blank",rel:"noopener noreferrer"}},[t._v("#56"),v("OutboundLink")],1),t._v(" for original discussion.")]),t._v(" "),v("p",[t._v("Note that some methods ("),v("code",[t._v("Query, CheckTx, DeliverTx")]),t._v(") return\nexplicitly non-deterministic data in the form of "),v("code",[t._v("Info")]),t._v(" and "),v("code",[t._v("Log")]),t._v(" fields. The "),v("code",[t._v("Log")]),t._v(" is\nintended for the literal output from the application's logger, while the\n"),v("code",[t._v("Info")]),t._v(" is any additional info that should be returned. These are the only fields\nthat are not included in block header computations, so we don't need agreement\non them. All other fields in the "),v("code",[t._v("Response*")]),t._v(" must be strictly deterministic.")]),t._v(" "),v("h2",{attrs:{id:"block-execution"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#block-execution"}},[t._v("#")]),t._v(" Block Execution")]),t._v(" "),v("p",[t._v("The first time a new blockchain is started, Tendermint calls\n"),v("code",[t._v("InitChain")]),t._v(". From then on, the following sequence of methods is executed for each\nblock:")]),t._v(" "),v("p",[v("code",[t._v("BeginBlock, [DeliverTx], EndBlock, Commit")])]),t._v(" "),v("p",[t._v("where one "),v("code",[t._v("DeliverTx")]),t._v(" is called for each transaction in the block.\nThe result is an updated application state.\nCryptographic commitments to the results of DeliverTx, EndBlock, and\nCommit are included in the header of the next block.")]),t._v(" "),v("h2",{attrs:{id:"state-sync"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#state-sync"}},[t._v("#")]),t._v(" State Sync")]),t._v(" "),v("p",[t._v("State sync allows new nodes to rapidly bootstrap by discovering, fetching, and applying\nstate machine snapshots instead of replaying historical blocks. For more details, see the\n"),v("RouterLink",{attrs:{to:"/spec/abci/apps.html#state-sync"}},[t._v("state sync section")]),t._v(".")],1),t._v(" "),v("p",[t._v("When a new node is discovering snapshots in the P2P network, existing nodes will call\n"),v("code",[t._v("ListSnapshots")]),t._v(" on the application to retrieve any local state snapshots. The new node will\noffer these snapshots to its local application via "),v("code",[t._v("OfferSnapshot")]),t._v(".")]),t._v(" "),v("p",[t._v("Once the application accepts a snapshot and begins restoring it, Tendermint will fetch snapshot\nchunks from existing nodes via "),v("code",[t._v("LoadSnapshotChunk")]),t._v(" and apply them sequentially to the local\napplication with "),v("code",[t._v("ApplySnapshotChunk")]),t._v(". When all chunks have been applied, the application\n"),v("code",[t._v("AppHash")]),t._v(" is retrieved via an "),v("code",[t._v("Info")]),t._v(" query and compared to the blockchain's "),v("code",[t._v("AppHash")]),t._v(" verified\nvia light client.")]),t._v(" "),v("h2",{attrs:{id:"messages"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#messages"}},[t._v("#")]),t._v(" Messages")]),t._v(" "),v("h3",{attrs:{id:"echo"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#echo"}},[t._v("#")]),t._v(" Echo")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("Request")]),t._v(":\n"),v("ul",[v("li",[v("code",[t._v("Message (string)")]),t._v(": A string to echo back")])])]),t._v(" "),v("li",[v("strong",[t._v("Response")]),t._v(":\n"),v("ul",[v("li",[v("code",[t._v("Message (string)")]),t._v(": The input string")])])]),t._v(" "),v("li",[v("strong",[t._v("Usage")]),t._v(":\n"),v("ul",[v("li",[t._v("Echo a string to test an abci client/server implementation")])])])]),t._v(" "),v("h3",{attrs:{id:"flush"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#flush"}},[t._v("#")]),t._v(" Flush")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("Usage")]),t._v(":\n"),v("ul",[v("li",[t._v("Signals that messages queued on the client should be flushed to\nthe server. It is called periodically by the client\nimplementation to ensure asynchronous requests are actually\nsent, and is called immediately to make a synchronous request,\nwhich returns when the Flush response comes back.")])])])]),t._v(" "),v("h3",{attrs:{id:"info"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#info"}},[t._v("#")]),t._v(" Info")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("Request")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("version")]),t._v(" "),v("td",[t._v("string")]),t._v(" "),v("td",[t._v("The Tendermint software semantic version")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("block_version")]),t._v(" "),v("td",[t._v("uint64")]),t._v(" "),v("td",[t._v("The Tendermint Block Protocol version")]),t._v(" "),v("td",[t._v("2")])]),t._v(" "),v("tr",[v("td",[t._v("p2p_version")]),t._v(" "),v("td",[t._v("uint64")]),t._v(" "),v("td",[t._v("The Tendermint P2P Protocol version")]),t._v(" "),v("td",[t._v("3")])]),t._v(" "),v("tr",[v("td",[t._v("abci_version")]),t._v(" "),v("td",[t._v("string")]),t._v(" "),v("td",[t._v("The Tendermint ABCI semantic version")]),t._v(" "),v("td",[t._v("4")])])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Response")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("data")]),t._v(" "),v("td",[t._v("string")]),t._v(" "),v("td",[t._v("Some arbitrary information")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("version")]),t._v(" "),v("td",[t._v("string")]),t._v(" "),v("td",[t._v("The application software semantic version")]),t._v(" "),v("td",[t._v("2")])]),t._v(" "),v("tr",[v("td",[t._v("app_version")]),t._v(" "),v("td",[t._v("uint64")]),t._v(" "),v("td",[t._v("The application protocol version")]),t._v(" "),v("td",[t._v("3")])]),t._v(" "),v("tr",[v("td",[t._v("last_block_height")]),t._v(" "),v("td",[t._v("int64")]),t._v(" "),v("td",[t._v("Latest block for which the app has called Commit")]),t._v(" "),v("td",[t._v("4")])]),t._v(" "),v("tr",[v("td",[t._v("last_block_app_hash")]),t._v(" "),v("td",[t._v("bytes")]),t._v(" "),v("td",[t._v("Latest result of Commit")]),t._v(" "),v("td",[t._v("5")])])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Usage")]),t._v(":")]),t._v(" "),v("ul",[v("li",[t._v("Return information about the application state.")]),t._v(" "),v("li",[t._v("Used to sync Tendermint with the application during a handshake\nthat happens on startup.")]),t._v(" "),v("li",[t._v("The returned "),v("code",[t._v("app_version")]),t._v(" will be included in the Header of every block.")]),t._v(" "),v("li",[t._v("Tendermint expects "),v("code",[t._v("last_block_app_hash")]),t._v(" and "),v("code",[t._v("last_block_height")]),t._v(" to\nbe updated during "),v("code",[t._v("Commit")]),t._v(", ensuring that "),v("code",[t._v("Commit")]),t._v(" is never\ncalled twice for the same block height.")])])])]),t._v(" "),v("blockquote",[v("p",[t._v("Note: Semantic version is reference to "),v("a",{attrs:{href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("semantic versioning"),v("OutboundLink")],1),t._v(". Semantic versions in info will be displayed as X.X.x.")])]),t._v(" "),v("h3",{attrs:{id:"initchain"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#initchain"}},[t._v("#")]),t._v(" InitChain")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("Request")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("time")]),t._v(" "),v("td",[v("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Timestamp",target:"_blank",rel:"noopener noreferrer"}},[t._v("google.protobuf.Timestamp"),v("OutboundLink")],1)]),t._v(" "),v("td",[t._v("Genesis time")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("chain_id")]),t._v(" "),v("td",[t._v("string")]),t._v(" "),v("td",[t._v("ID of the blockchain.")]),t._v(" "),v("td",[t._v("2")])]),t._v(" "),v("tr",[v("td",[t._v("consensus_params")]),t._v(" "),v("td",[v("a",{attrs:{href:"#consensusparams"}},[t._v("ConsensusParams")])]),t._v(" "),v("td",[t._v("Initial consensus-critical parameters.")]),t._v(" "),v("td",[t._v("3")])]),t._v(" "),v("tr",[v("td",[t._v("validators")]),t._v(" "),v("td",[t._v("repeated "),v("a",{attrs:{href:"#validatorupdate"}},[t._v("ValidatorUpdate")])]),t._v(" "),v("td",[t._v("Initial genesis validators, sorted by voting power.")]),t._v(" "),v("td",[t._v("4")])]),t._v(" "),v("tr",[v("td",[t._v("app_state_bytes")]),t._v(" "),v("td",[t._v("bytes")]),t._v(" "),v("td",[t._v("Serialized initial application state. JSON bytes.")]),t._v(" "),v("td",[t._v("5")])]),t._v(" "),v("tr",[v("td",[t._v("initial_height")]),t._v(" "),v("td",[t._v("int64")]),t._v(" "),v("td",[t._v("Height of the initial block (typically "),v("code",[t._v("1")]),t._v(").")]),t._v(" "),v("td",[t._v("6")])])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Response")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("consensus_params")]),t._v(" "),v("td",[v("a",{attrs:{href:"#consensusparams"}},[t._v("ConsensusParams")])]),t._v(" "),v("td",[t._v("Initial consensus-critical parameters (optional")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("validators")]),t._v(" "),v("td",[t._v("repeated "),v("a",{attrs:{href:"#validatorupdate"}},[t._v("ValidatorUpdate")])]),t._v(" "),v("td",[t._v("Initial validator set (optional).")]),t._v(" "),v("td",[t._v("2")])]),t._v(" "),v("tr",[v("td",[t._v("app_hash")]),t._v(" "),v("td",[t._v("bytes")]),t._v(" "),v("td",[t._v("Initial application hash.")]),t._v(" "),v("td",[t._v("3")])])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Usage")]),t._v(":")]),t._v(" "),v("ul",[v("li",[t._v("Called once upon genesis.")]),t._v(" "),v("li",[t._v("If ResponseInitChain.Validators is empty, the initial validator set will be the RequestInitChain.Validators")]),t._v(" "),v("li",[t._v("If ResponseInitChain.Validators is not empty, it will be the initial\nvalidator set (regardless of what is in RequestInitChain.Validators).")]),t._v(" "),v("li",[t._v("This allows the app to decide if it wants to accept the initial validator\nset proposed by tendermint (ie. in the genesis file), or if it wants to use\na different one (perhaps computed based on some application specific\ninformation in the genesis file).")])])])]),t._v(" "),v("h3",{attrs:{id:"query"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#query"}},[t._v("#")]),t._v(" Query")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("Request")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("data")]),t._v(" "),v("td",[t._v("bytes")]),t._v(" "),v("td",[t._v("Raw query bytes. Can be used with or in lieu of Path.")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("path")]),t._v(" "),v("td",[t._v("string")]),t._v(" "),v("td",[t._v("Path of request, like an HTTP GET path. Can be used with or in liue of Data. Apps MUST interpret '/store' as a query by key on the underlying store. The key SHOULD be specified in the Data field. Apps SHOULD allow queries over specific types like '/accounts/...' or '/votes/...'")]),t._v(" "),v("td",[t._v("2")])]),t._v(" "),v("tr",[v("td",[t._v("height")]),t._v(" "),v("td",[t._v("int64")]),t._v(" "),v("td",[t._v("The block height for which you want the query (default=0 returns data for the latest committed block). Note that this is the height of the block containing the application's Merkle root hash, which represents the state as it was after committing the block at Height-1")]),t._v(" "),v("td",[t._v("3")])]),t._v(" "),v("tr",[v("td",[t._v("prove")]),t._v(" "),v("td",[t._v("bool")]),t._v(" "),v("td",[t._v("Return Merkle proof with response if possible")]),t._v(" "),v("td",[t._v("4")])])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Response")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("code")]),t._v(" "),v("td",[t._v("uint32")]),t._v(" "),v("td",[t._v("Response code.")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("log")]),t._v(" "),v("td",[t._v("string")]),t._v(" "),v("td",[t._v("The output of the application's logger. "),v("strong",[t._v("May be non-deterministic.")])]),t._v(" "),v("td",[t._v("3")])]),t._v(" "),v("tr",[v("td",[t._v("info")]),t._v(" "),v("td",[t._v("string")]),t._v(" "),v("td",[t._v("Additional information. "),v("strong",[t._v("May be non-deterministic.")])]),t._v(" "),v("td",[t._v("4")])]),t._v(" "),v("tr",[v("td",[t._v("index")]),t._v(" "),v("td",[t._v("int64")]),t._v(" "),v("td",[t._v("The index of the key in the tree.")]),t._v(" "),v("td",[t._v("5")])]),t._v(" "),v("tr",[v("td",[t._v("key")]),t._v(" "),v("td",[t._v("bytes")]),t._v(" "),v("td",[t._v("The key of the matching data.")]),t._v(" "),v("td",[t._v("6")])]),t._v(" "),v("tr",[v("td",[t._v("value")]),t._v(" "),v("td",[t._v("bytes")]),t._v(" "),v("td",[t._v("The value of the matching data.")]),t._v(" "),v("td",[t._v("7")])]),t._v(" "),v("tr",[v("td",[t._v("proof_ops")]),t._v(" "),v("td",[v("a",{attrs:{href:"#proofops"}},[t._v("ProofOps")])]),t._v(" "),v("td",[t._v("Serialized proof for the value data, if requested, to be verified against the "),v("code",[t._v("app_hash")]),t._v(" for the given Height.")]),t._v(" "),v("td",[t._v("8")])]),t._v(" "),v("tr",[v("td",[t._v("height")]),t._v(" "),v("td",[t._v("int64")]),t._v(" "),v("td",[t._v("The block height from which data was derived. Note that this is the height of the block containing the application's Merkle root hash, which represents the state as it was after committing the block at Height-1")]),t._v(" "),v("td",[t._v("9")])]),t._v(" "),v("tr",[v("td",[t._v("codespace")]),t._v(" "),v("td",[t._v("string")]),t._v(" "),v("td",[t._v("Namespace for the "),v("code",[t._v("code")]),t._v(".")]),t._v(" "),v("td",[t._v("10")])])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Usage")]),t._v(":")]),t._v(" "),v("ul",[v("li",[t._v("Query for data from the application at current or past height.")]),t._v(" "),v("li",[t._v("Optionally return Merkle proof.")]),t._v(" "),v("li",[t._v("Merkle proof includes self-describing "),v("code",[t._v("type")]),t._v(" field to support many types\nof Merkle trees and encoding formats.")])])])]),t._v(" "),v("h3",{attrs:{id:"beginblock"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#beginblock"}},[t._v("#")]),t._v(" BeginBlock")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("Request")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("hash")]),t._v(" "),v("td",[t._v("bytes")]),t._v(" "),v("td",[t._v("The block's hash. This can be derived from the block header.")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("header")]),t._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#header"}},[t._v("Header")])],1),t._v(" "),v("td",[t._v("The block header.")]),t._v(" "),v("td",[t._v("2")])]),t._v(" "),v("tr",[v("td",[t._v("last_commit_info")]),t._v(" "),v("td",[v("a",{attrs:{href:"#lastcommitinfo"}},[t._v("LastCommitInfo")])]),t._v(" "),v("td",[t._v("Info about the last commit, including the round, and the list of validators and which ones signed the last block.")]),t._v(" "),v("td",[t._v("3")])]),t._v(" "),v("tr",[v("td",[t._v("byzantine_validators")]),t._v(" "),v("td",[t._v("repeated "),v("a",{attrs:{href:"#evidence"}},[t._v("Evidence")])]),t._v(" "),v("td",[t._v("List of evidence of validators that acted maliciously.")]),t._v(" "),v("td",[t._v("4")])])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Response")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("events")]),t._v(" "),v("td",[t._v("repeated "),v("a",{attrs:{href:"#events"}},[t._v("Event")])]),t._v(" "),v("td",[t._v("ype & Key-Value events for indexing")]),t._v(" "),v("td",[t._v("1")])])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Usage")]),t._v(":")]),t._v(" "),v("ul",[v("li",[t._v("Signals the beginning of a new block. Called prior to\nany DeliverTxs.")]),t._v(" "),v("li",[t._v("The header contains the height, timestamp, and more - it exactly matches the\nTendermint block header. We may seek to generalize this in the future.")]),t._v(" "),v("li",[t._v("The "),v("code",[t._v("LastCommitInfo")]),t._v(" and "),v("code",[t._v("ByzantineValidators")]),t._v(" can be used to determine\nrewards and punishments for the validators. NOTE validators here do not\ninclude pubkeys.")])])])]),t._v(" "),v("h3",{attrs:{id:"checktx"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#checktx"}},[t._v("#")]),t._v(" CheckTx")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("Request")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("tx")]),t._v(" "),v("td",[t._v("bytes")]),t._v(" "),v("td",[t._v("The request transaction bytes")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("type")]),t._v(" "),v("td",[t._v("CheckTxType")]),t._v(" "),v("td",[t._v("What type of "),v("code",[t._v("CheckTx")]),t._v(" request is this? At present, there are two possible values: "),v("code",[t._v("CheckTx_New")]),t._v(" (the default, which says that a full check is required), and "),v("code",[t._v("CheckTx_Recheck")]),t._v(" (when the mempool is initiating a normal recheck of a transaction).")]),t._v(" "),v("td",[t._v("2")])])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Response")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("code")]),t._v(" "),v("td",[t._v("uint32")]),t._v(" "),v("td",[t._v("Response code.")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("data")]),t._v(" "),v("td",[t._v("bytes")]),t._v(" "),v("td",[t._v("Result bytes, if any.")]),t._v(" "),v("td",[t._v("2")])]),t._v(" "),v("tr",[v("td",[t._v("log")]),t._v(" "),v("td",[t._v("string")]),t._v(" "),v("td",[t._v("The output of the application's logger. "),v("strong",[t._v("May be non-deterministic.")])]),t._v(" "),v("td",[t._v("3")])]),t._v(" "),v("tr",[v("td",[t._v("info")]),t._v(" "),v("td",[t._v("string")]),t._v(" "),v("td",[t._v("Additional information. "),v("strong",[t._v("May be non-deterministic.")])]),t._v(" "),v("td",[t._v("4")])]),t._v(" "),v("tr",[v("td",[t._v("gas_wanted")]),t._v(" "),v("td",[t._v("int64")]),t._v(" "),v("td",[t._v("Amount of gas requested for transaction.")]),t._v(" "),v("td",[t._v("5")])]),t._v(" "),v("tr",[v("td",[t._v("gas_used")]),t._v(" "),v("td",[t._v("int64")]),t._v(" "),v("td",[t._v("Amount of gas consumed by transaction.")]),t._v(" "),v("td",[t._v("6")])]),t._v(" "),v("tr",[v("td",[t._v("events")]),t._v(" "),v("td",[t._v("repeated "),v("a",{attrs:{href:"#events"}},[t._v("Event")])]),t._v(" "),v("td",[t._v("Type & Key-Value events for indexing transactions (eg. by account).")]),t._v(" "),v("td",[t._v("7")])]),t._v(" "),v("tr",[v("td",[t._v("codespace")]),t._v(" "),v("td",[t._v("string")]),t._v(" "),v("td",[t._v("Namespace for the "),v("code",[t._v("code")]),t._v(".")]),t._v(" "),v("td",[t._v("8")])])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Usage")]),t._v(":")]),t._v(" "),v("ul",[v("li",[t._v("Technically optional - not involved in processing blocks.")]),t._v(" "),v("li",[t._v("Guardian of the mempool: every node runs CheckTx before letting a\ntransaction into its local mempool.")]),t._v(" "),v("li",[t._v("The transaction may come from an external user or another node")]),t._v(" "),v("li",[t._v("CheckTx need not execute the transaction in full, but rather a light-weight\nyet stateful validation, like checking signatures and account balances, but\nnot running code in a virtual machine.")]),t._v(" "),v("li",[t._v("Transactions where "),v("code",[t._v("ResponseCheckTx.Code != 0")]),t._v(" will be rejected - they will not be broadcast to\nother nodes or included in a proposal block.")]),t._v(" "),v("li",[t._v("Tendermint attributes no other value to the response code")])])])]),t._v(" "),v("h3",{attrs:{id:"delivertx"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#delivertx"}},[t._v("#")]),t._v(" DeliverTx")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("Request")]),t._v(":")])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("tx")]),t._v(" "),v("td",[t._v("bytes")]),t._v(" "),v("td",[t._v("The request transaction bytes.")]),t._v(" "),v("td",[t._v("1")])])])]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("Response")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("code")]),t._v(" "),v("td",[t._v("uint32")]),t._v(" "),v("td",[t._v("Response code.")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("data")]),t._v(" "),v("td",[t._v("bytes")]),t._v(" "),v("td",[t._v("Result bytes, if any.")]),t._v(" "),v("td",[t._v("2")])]),t._v(" "),v("tr",[v("td",[t._v("log")]),t._v(" "),v("td",[t._v("string")]),t._v(" "),v("td",[t._v("The output of the application's logger. "),v("strong",[t._v("May be non-deterministic.")])]),t._v(" "),v("td",[t._v("3")])]),t._v(" "),v("tr",[v("td",[t._v("info")]),t._v(" "),v("td",[t._v("string")]),t._v(" "),v("td",[t._v("Additional information. "),v("strong",[t._v("May be non-deterministic.")])]),t._v(" "),v("td",[t._v("4")])]),t._v(" "),v("tr",[v("td",[t._v("gas_wanted")]),t._v(" "),v("td",[t._v("int64")]),t._v(" "),v("td",[t._v("Amount of gas requested for transaction.")]),t._v(" "),v("td",[t._v("5")])]),t._v(" "),v("tr",[v("td",[t._v("gas_used")]),t._v(" "),v("td",[t._v("int64")]),t._v(" "),v("td",[t._v("Amount of gas consumed by transaction.")]),t._v(" "),v("td",[t._v("6")])]),t._v(" "),v("tr",[v("td",[t._v("events")]),t._v(" "),v("td",[t._v("repeated "),v("a",{attrs:{href:"#events"}},[t._v("Event")])]),t._v(" "),v("td",[t._v("Type & Key-Value events for indexing transactions (eg. by account).")]),t._v(" "),v("td",[t._v("7")])]),t._v(" "),v("tr",[v("td",[t._v("codespace")]),t._v(" "),v("td",[t._v("string")]),t._v(" "),v("td",[t._v("Namespace for the "),v("code",[t._v("code")]),t._v(".")]),t._v(" "),v("td",[t._v("8")])])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Usage")]),t._v(":")]),t._v(" "),v("ul",[v("li",[t._v("The workhorse of the application - non-optional.")]),t._v(" "),v("li",[t._v("Execute the transaction in full.")]),t._v(" "),v("li",[v("code",[t._v("ResponseDeliverTx.Code == 0")]),t._v(" only if the transaction is fully valid.")])])])]),t._v(" "),v("h3",{attrs:{id:"endblock"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#endblock"}},[t._v("#")]),t._v(" EndBlock")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("Request")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("height")]),t._v(" "),v("td",[t._v("int64")]),t._v(" "),v("td",[t._v("Height of the block just executed.")]),t._v(" "),v("td",[t._v("1")])])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Response")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("validator_updates")]),t._v(" "),v("td",[t._v("repeated "),v("a",{attrs:{href:"#validatorupdate"}},[t._v("ValidatorUpdate")])]),t._v(" "),v("td",[t._v("Changes to validator set (set voting power to 0 to remove).")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("consensus_param_updates")]),t._v(" "),v("td",[v("a",{attrs:{href:"#consensusparams"}},[t._v("ConsensusParams")])]),t._v(" "),v("td",[t._v("Changes to consensus-critical time, size, and other parameters.")]),t._v(" "),v("td",[t._v("2")])]),t._v(" "),v("tr",[v("td",[t._v("events")]),t._v(" "),v("td",[t._v("repeated "),v("a",{attrs:{href:"#events"}},[t._v("Event")])]),t._v(" "),v("td",[t._v("Type & Key-Value events for indexing")]),t._v(" "),v("td",[t._v("3")])])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Usage")]),t._v(":")]),t._v(" "),v("ul",[v("li",[t._v("Signals the end of a block.")]),t._v(" "),v("li",[t._v("Called after all transactions, prior to each Commit.")]),t._v(" "),v("li",[t._v("Validator updates returned by block "),v("code",[t._v("H")]),t._v(" impact blocks "),v("code",[t._v("H+1")]),t._v(", "),v("code",[t._v("H+2")]),t._v(", and\n"),v("code",[t._v("H+3")]),t._v(", but only effects changes on the validator set of "),v("code",[t._v("H+2")]),t._v(":\n"),v("ul",[v("li",[v("code",[t._v("H+1")]),t._v(": NextValidatorsHash")]),t._v(" "),v("li",[v("code",[t._v("H+2")]),t._v(": ValidatorsHash (and thus the validator set)")]),t._v(" "),v("li",[v("code",[t._v("H+3")]),t._v(": LastCommitInfo (ie. the last validator set)")])])]),t._v(" "),v("li",[t._v("Consensus params returned for block "),v("code",[t._v("H")]),t._v(" apply for block "),v("code",[t._v("H+1")])])])])]),t._v(" "),v("h3",{attrs:{id:"commit"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#commit"}},[t._v("#")]),t._v(" Commit")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("Request")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody")]),t._v(" "),v("p",[t._v("Empty request meant to signal to the app it can write state transitions to state.")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Response")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("data")]),t._v(" "),v("td",[t._v("bytes")]),t._v(" "),v("td",[t._v("The Merkle root hash of the application state.")]),t._v(" "),v("td",[t._v("2")])]),t._v(" "),v("tr",[v("td",[t._v("retain_height")]),t._v(" "),v("td",[t._v("int64")]),t._v(" "),v("td",[t._v("Blocks below this height may be removed. Defaults to "),v("code",[t._v("0")]),t._v(" (retain all).")]),t._v(" "),v("td",[t._v("3")])])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Usage")]),t._v(":")]),t._v(" "),v("ul",[v("li",[t._v("Persist the application state.")]),t._v(" "),v("li",[t._v("Return an (optional) Merkle root hash of the application state")]),t._v(" "),v("li",[v("code",[t._v("ResponseCommit.Data")]),t._v(" is included as the "),v("code",[t._v("Header.AppHash")]),t._v(" in the next block\n"),v("ul",[v("li",[t._v("it may be empty")])])]),t._v(" "),v("li",[t._v("Later calls to "),v("code",[t._v("Query")]),t._v(" can return proofs about the application state anchored\nin this Merkle root hash")]),t._v(" "),v("li",[t._v("Note developers can return whatever they want here (could be nothing, or a\nconstant string, etc.), so long as it is deterministic - it must not be a\nfunction of anything that did not come from the\nBeginBlock/DeliverTx/EndBlock methods.")]),t._v(" "),v("li",[t._v("Use "),v("code",[t._v("RetainHeight")]),t._v(" with caution! If all nodes in the network remove historical\nblocks then this data is permanently lost, and no new nodes will be able to\njoin the network and bootstrap. Historical blocks may also be required for\nother purposes, e.g. auditing, replay of non-persisted heights, light client\nverification, and so on.")])])])]),t._v(" "),v("h3",{attrs:{id:"listsnapshots"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#listsnapshots"}},[t._v("#")]),t._v(" ListSnapshots")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("Request")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody")]),t._v(" "),v("p",[t._v("Empty request asking the application for a list of snapshots.")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Response")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("snapshots")]),t._v(" "),v("td",[t._v("repeated "),v("a",{attrs:{href:"#snapshot"}},[t._v("Snapshot")])]),t._v(" "),v("td",[t._v("List of local state snapshots.")]),t._v(" "),v("td",[t._v("1")])])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Usage")]),t._v(":")]),t._v(" "),v("ul",[v("li",[t._v("Used during state sync to discover available snapshots on peers.")]),t._v(" "),v("li",[t._v("See "),v("code",[t._v("Snapshot")]),t._v(" data type for details.")])])])]),t._v(" "),v("h3",{attrs:{id:"loadsnapshotchunk"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#loadsnapshotchunk"}},[t._v("#")]),t._v(" LoadSnapshotChunk")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("Request")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("height")]),t._v(" "),v("td",[t._v("uint64")]),t._v(" "),v("td",[t._v("The height of the snapshot the chunks belongs to.")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("format")]),t._v(" "),v("td",[t._v("uint32")]),t._v(" "),v("td",[t._v("The application-specific format of the snapshot the chunk belongs to.")]),t._v(" "),v("td",[t._v("2")])]),t._v(" "),v("tr",[v("td",[t._v("chunk")]),t._v(" "),v("td",[t._v("uint32")]),t._v(" "),v("td",[t._v("The chunk index, starting from "),v("code",[t._v("0")]),t._v(" for the initial chunk.")]),t._v(" "),v("td",[t._v("3")])])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Response")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("chunk")]),t._v(" "),v("td",[t._v("bytes")]),t._v(" "),v("td",[t._v("The binary chunk contents, in an arbitray format. Chunk messages cannot be larger than 16 MB "),v("em",[t._v("including metadata")]),t._v(", so 10 MB is a good starting point.")]),t._v(" "),v("td",[t._v("1")])])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Usage")]),t._v(":")]),t._v(" "),v("ul",[v("li",[t._v("Used during state sync to retrieve snapshot chunks from peers.")])])])]),t._v(" "),v("h3",{attrs:{id:"offersnapshot"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#offersnapshot"}},[t._v("#")]),t._v(" OfferSnapshot")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("Request")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("snapshot")]),t._v(" "),v("td",[v("a",{attrs:{href:"#snapshot"}},[t._v("Snapshot")])]),t._v(" "),v("td",[t._v("The snapshot offered for restoration.")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("app_hash")]),t._v(" "),v("td",[t._v("bytes")]),t._v(" "),v("td",[t._v("The light client-verified app hash for this height, from the blockchain.")]),t._v(" "),v("td",[t._v("2")])])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Response")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("result")]),t._v(" "),v("td",[v("a",{attrs:{href:"#result"}},[t._v("Result")])]),t._v(" "),v("td",[t._v("The result of the snapshot offer.")]),t._v(" "),v("td",[t._v("1")])])])])])]),t._v(" "),v("h4",{attrs:{id:"result"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#result"}},[t._v("#")]),t._v(" Result")]),t._v(" "),v("tm-code-block",{staticClass:"codeblock",attrs:{language:"proto",base64:"ICBlbnVtIFJlc3VsdCB7CiAgICBVTktOT1dOICAgICAgID0gMDsgIC8vIFVua25vd24gcmVzdWx0LCBhYm9ydCBhbGwgc25hcHNob3QgcmVzdG9yYXRpb24KICAgIEFDQ0VQVCAgICAgICAgPSAxOyAgLy8gU25hcHNob3QgaXMgYWNjZXB0ZWQsIHN0YXJ0IGFwcGx5aW5nIGNodW5rcy4KICAgIEFCT1JUICAgICAgICAgPSAyOyAgLy8gQWJvcnQgc25hcHNob3QgcmVzdG9yYXRpb24sIGFuZCBkb24ndCB0cnkgYW55IG90aGVyIHNuYXBzaG90cy4KICAgIFJFSkVDVCAgICAgICAgPSAzOyAgLy8gUmVqZWN0IHRoaXMgc3BlY2lmaWMgc25hcHNob3QsIHRyeSBvdGhlcnMuCiAgICBSRUpFQ1RfRk9STUFUID0gNDsgIC8vIFJlamVjdCBhbGwgc25hcHNob3RzIHdpdGggdGhpcyBgZm9ybWF0YCwgdHJ5IG90aGVycy4KICAgIFJFSkVDVF9TRU5ERVIgPSA1OyAgLy8gUmVqZWN0IGFsbCBzbmFwc2hvdHMgZnJvbSBhbGwgc2VuZGVycyBvZiB0aGlzIHNuYXBzaG90LCB0cnkgb3RoZXJzLgogIH0K"}}),t._v(" "),v("ul",[v("li",[v("strong",[t._v("Usage")]),t._v(":\n"),v("ul",[v("li",[v("code",[t._v("OfferSnapshot")]),t._v(" is called when bootstrapping a node using state sync. The application may\naccept or reject snapshots as appropriate. Upon accepting, Tendermint will retrieve and\napply snapshot chunks via "),v("code",[t._v("ApplySnapshotChunk")]),t._v(". The application may also choose to reject a\nsnapshot in the chunk response, in which case it should be prepared to accept further\n"),v("code",[t._v("OfferSnapshot")]),t._v(" calls.")]),t._v(" "),v("li",[t._v("Only "),v("code",[t._v("AppHash")]),t._v(" can be trusted, as it has been verified by the light client. Any other data\ncan be spoofed by adversaries, so applications should employ additional verification schemes\nto avoid denial-of-service attacks. The verified "),v("code",[t._v("AppHash")]),t._v(" is automatically checked against\nthe restored application at the end of snapshot restoration.")]),t._v(" "),v("li",[t._v("For more information, see the "),v("code",[t._v("Snapshot")]),t._v(" data type or the "),v("RouterLink",{attrs:{to:"/spec/abci/apps.html#state-sync"}},[t._v("state sync section")]),t._v(".")],1)])])]),t._v(" "),v("h3",{attrs:{id:"applysnapshotchunk"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#applysnapshotchunk"}},[t._v("#")]),t._v(" ApplySnapshotChunk")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("Request")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("index")]),t._v(" "),v("td",[t._v("uint32")]),t._v(" "),v("td",[t._v("The chunk index, starting from "),v("code",[t._v("0")]),t._v(". Tendermint applies chunks sequentially.")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("chunk")]),t._v(" "),v("td",[t._v("bytes")]),t._v(" "),v("td",[t._v("The binary chunk contents, as returned by "),v("code",[t._v("LoadSnapshotChunk")]),t._v(".")]),t._v(" "),v("td",[t._v("2")])]),t._v(" "),v("tr",[v("td",[t._v("sender")]),t._v(" "),v("td",[t._v("string")]),t._v(" "),v("td",[t._v("The P2P ID of the node who sent this chunk.")]),t._v(" "),v("td",[t._v("3")])])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Response")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("result")]),t._v(" "),v("td",[t._v("Result  (see below)")]),t._v(" "),v("td",[t._v("The result of applying this chunk.")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("refetch_chunks")]),t._v(" "),v("td",[t._v("repeated uint32")]),t._v(" "),v("td",[t._v("Refetch and reapply the given chunks, regardless of "),v("code",[t._v("result")]),t._v(". Only the listed chunks will be refetched, and reapplied in sequential order.")]),t._v(" "),v("td",[t._v("2")])]),t._v(" "),v("tr",[v("td",[t._v("reject_senders")]),t._v(" "),v("td",[t._v("repeated string")]),t._v(" "),v("td",[t._v("Reject the given P2P senders, regardless of "),v("code",[t._v("Result")]),t._v(". Any chunks already applied will not be refetched unless explicitly requested, but queued chunks from these senders will be discarded, and new chunks or other snapshots rejected.")]),t._v(" "),v("td",[t._v("3")])])])])])]),t._v(" "),v("tm-code-block",{staticClass:"codeblock",attrs:{language:"proto",base64:"ICBlbnVtIFJlc3VsdCB7CiAgICBVTktOT1dOICAgICAgICAgPSAwOyAgLy8gVW5rbm93biByZXN1bHQsIGFib3J0IGFsbCBzbmFwc2hvdCByZXN0b3JhdGlvbgogICAgQUNDRVBUICAgICAgICAgID0gMTsgIC8vIFRoZSBjaHVuayB3YXMgYWNjZXB0ZWQuCiAgICBBQk9SVCAgICAgICAgICAgPSAyOyAgLy8gQWJvcnQgc25hcHNob3QgcmVzdG9yYXRpb24sIGFuZCBkb24ndCB0cnkgYW55IG90aGVyIHNuYXBzaG90cy4KICAgIFJFVFJZICAgICAgICAgICA9IDM7ICAvLyBSZWFwcGx5IHRoaXMgY2h1bmssIGNvbWJpbmUgd2l0aCBgUmVmZXRjaENodW5rc2AgYW5kIGBSZWplY3RTZW5kZXJzYCBhcyBhcHByb3ByaWF0ZS4KICAgIFJFVFJZX1NOQVBTSE9UICA9IDQ7ICAvLyBSZXN0YXJ0IHRoaXMgc25hcHNob3QgZnJvbSBgT2ZmZXJTbmFwc2hvdGAsIHJldXNpbmcgY2h1bmtzIHVubGVzcyBpbnN0cnVjdGVkIG90aGVyd2lzZS4KICAgIFJFSkVDVF9TTkFQU0hPVCA9IDU7ICAvLyBSZWplY3QgdGhpcyBzbmFwc2hvdCwgdHJ5IGEgZGlmZmVyZW50IG9uZS4KICB9Cg=="}}),t._v(" "),v("ul",[v("li",[v("strong",[t._v("Usage")]),t._v(":\n"),v("ul",[v("li",[t._v("The application can choose to refetch chunks and/or ban P2P peers as appropriate. Tendermint\nwill not do this unless instructed by the application.")]),t._v(" "),v("li",[t._v("The application may want to verify each chunk, e.g. by attaching chunk hashes in\n"),v("code",[t._v("Snapshot.Metadata")]),t._v(" and/or incrementally verifying contents against "),v("code",[t._v("AppHash")]),t._v(".")]),t._v(" "),v("li",[t._v("When all chunks have been accepted, Tendermint will make an ABCI "),v("code",[t._v("Info")]),t._v(" call to verify that\n"),v("code",[t._v("LastBlockAppHash")]),t._v(" and "),v("code",[t._v("LastBlockHeight")]),t._v(" matches the expected values, and record the\n"),v("code",[t._v("AppVersion")]),t._v(" in the node state. It then switches to fast sync or consensus and joins the\nnetwork.")]),t._v(" "),v("li",[t._v("If Tendermint is unable to retrieve the next chunk after some time (e.g. because no suitable\npeers are available), it will reject the snapshot and try a different one via "),v("code",[t._v("OfferSnapshot")]),t._v(".\nThe application should be prepared to reset and accept it or abort as appropriate.")])])])]),t._v(" "),v("h2",{attrs:{id:"data-types"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#data-types"}},[t._v("#")]),t._v(" Data Types")]),t._v(" "),v("p",[t._v("The data types not listed below are the same as the "),v("RouterLink",{attrs:{to:"/spec/core/data_structures.html"}},[t._v("core data structures")]),t._v(". The ones listed below have specific changes to better accommodate applications.")],1),t._v(" "),v("h3",{attrs:{id:"validator"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#validator"}},[t._v("#")]),t._v(" Validator")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("Fields")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("address")]),t._v(" "),v("td",[t._v("bytes")]),t._v(" "),v("td",[t._v("Address of the validator (the first 20 bytes of SHA256(public key))")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("power")]),t._v(" "),v("td",[t._v("int64")]),t._v(" "),v("td",[t._v("Voting power of the validator")]),t._v(" "),v("td",[t._v("3")])])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Usage")]),t._v(":")]),t._v(" "),v("ul",[v("li",[t._v("Validator identified by address")]),t._v(" "),v("li",[t._v("Used in RequestBeginBlock as part of VoteInfo")]),t._v(" "),v("li",[t._v("Does not include PubKey to avoid sending potentially large quantum pubkeys\nover the ABCI")])])])]),t._v(" "),v("h3",{attrs:{id:"validatorupdate"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#validatorupdate"}},[t._v("#")]),t._v(" ValidatorUpdate")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("Fields")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("pub_key")]),t._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#pub_key"}},[t._v("Public Key")])],1),t._v(" "),v("td",[t._v("Public key of the validator")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("power")]),t._v(" "),v("td",[t._v("int64")]),t._v(" "),v("td",[t._v("Voting power of the validator")]),t._v(" "),v("td",[t._v("2")])])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Usage")]),t._v(":")]),t._v(" "),v("ul",[v("li",[t._v("Validator identified by PubKey")]),t._v(" "),v("li",[t._v("Used to tell Tendermint to update the validator set")])])])]),t._v(" "),v("h3",{attrs:{id:"voteinfo"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#voteinfo"}},[t._v("#")]),t._v(" VoteInfo")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("Fields")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("validator")]),t._v(" "),v("td",[v("a",{attrs:{href:"#validator"}},[t._v("Validator")])]),t._v(" "),v("td",[t._v("A validator")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("signed_last_block")]),t._v(" "),v("td",[t._v("bool")]),t._v(" "),v("td",[t._v("Indicates whether or not the validator signed the last block")]),t._v(" "),v("td",[t._v("2")])])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Usage")]),t._v(":")]),t._v(" "),v("ul",[v("li",[t._v("Indicates whether a validator signed the last block, allowing for rewards\nbased on validator availability")])])])]),t._v(" "),v("h3",{attrs:{id:"evidence"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#evidence"}},[t._v("#")]),t._v(" Evidence")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("Fields")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("type")]),t._v(" "),v("td",[v("a",{attrs:{href:"#evidencetype"}},[t._v("EvidenceType")])]),t._v(" "),v("td",[t._v("Type of the evidence. An enum of possible evidence's.")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("validator")]),t._v(" "),v("td",[v("a",{attrs:{href:"#validator"}},[t._v("Validator")])]),t._v(" "),v("td",[t._v("The offending validator")]),t._v(" "),v("td",[t._v("2")])]),t._v(" "),v("tr",[v("td",[t._v("height")]),t._v(" "),v("td",[t._v("int64")]),t._v(" "),v("td",[t._v("Height when the offense occurred")]),t._v(" "),v("td",[t._v("3")])]),t._v(" "),v("tr",[v("td",[t._v("time")]),t._v(" "),v("td",[v("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Timestamp",target:"_blank",rel:"noopener noreferrer"}},[t._v("google.protobuf.Timestamp"),v("OutboundLink")],1)]),t._v(" "),v("td",[t._v("Time of the block that was committed at the height that the offense occurred")]),t._v(" "),v("td",[t._v("4")])]),t._v(" "),v("tr",[v("td",[t._v("total_voting_power")]),t._v(" "),v("td",[t._v("int64")]),t._v(" "),v("td",[t._v("Total voting power of the validator set at height "),v("code",[t._v("Height")])]),t._v(" "),v("td",[t._v("5")])])])])])]),t._v(" "),v("h4",{attrs:{id:"evidencetype-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#evidencetype-2"}},[t._v("#")]),t._v(" EvidenceType")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("Fields")])]),t._v(" "),v("p",[t._v("EvidenceType is an enum with the listed fields:")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("UNKNOWN")]),t._v(" "),v("td",[t._v("0")])]),t._v(" "),v("tr",[v("td",[t._v("DUPLICATE_VOTE")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("LIGHT_CLIENT_ATTACK")]),t._v(" "),v("td",[t._v("2")])])])])])]),t._v(" "),v("h3",{attrs:{id:"lastcommitinfo"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#lastcommitinfo"}},[t._v("#")]),t._v(" LastCommitInfo")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("Fields")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("round")]),t._v(" "),v("td",[t._v("int32")]),t._v(" "),v("td",[t._v("Commit round. Reflects the total amount of rounds it took to come to consensus for the current block.")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("votes")]),t._v(" "),v("td",[t._v("repeated "),v("a",{attrs:{href:"#voteinfo"}},[t._v("VoteInfo")])]),t._v(" "),v("td",[t._v("List of validators addresses in the last validator set with their voting power and whether or not they signed a vote.")]),t._v(" "),v("td",[t._v("2")])])])])])]),t._v(" "),v("h3",{attrs:{id:"consensusparams"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#consensusparams"}},[t._v("#")]),t._v(" ConsensusParams")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("Fields")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("block")]),t._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#blockparams"}},[t._v("BlockParams")])],1),t._v(" "),v("td",[t._v("Parameters limiting the size of a block and time between consecutive blocks.")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("evidence")]),t._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#evidenceparams"}},[t._v("EvidenceParams")])],1),t._v(" "),v("td",[t._v("Parameters limiting the validity of evidence of byzantine behaviour.")]),t._v(" "),v("td",[t._v("2")])]),t._v(" "),v("tr",[v("td",[t._v("validator")]),t._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#validatorparams"}},[t._v("ValidatorParams")])],1),t._v(" "),v("td",[t._v("Parameters limiting the types of public keys validators can use.")]),t._v(" "),v("td",[t._v("3")])]),t._v(" "),v("tr",[v("td",[t._v("version")]),t._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#versionparams"}},[t._v("VersionsParams")])],1),t._v(" "),v("td",[t._v("The ABCI application version.")]),t._v(" "),v("td",[t._v("4")])])])])])]),t._v(" "),v("h3",{attrs:{id:"proofops"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#proofops"}},[t._v("#")]),t._v(" ProofOps")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("Fields")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("ops")]),t._v(" "),v("td",[t._v("repeated "),v("a",{attrs:{href:"#proofop"}},[t._v("ProofOp")])]),t._v(" "),v("td",[t._v("List of chained Merkle proofs, of possibly different types. The Merkle root of one op is the value being proven in the next op. The Merkle root of the final op should equal the ultimate root hash being verified against..")]),t._v(" "),v("td",[t._v("1")])])])])])]),t._v(" "),v("h3",{attrs:{id:"proofop"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#proofop"}},[t._v("#")]),t._v(" ProofOp")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("Fields")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("type")]),t._v(" "),v("td",[t._v("string")]),t._v(" "),v("td",[t._v("Type of Merkle proof and how it's encoded.")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("key")]),t._v(" "),v("td",[t._v("bytes")]),t._v(" "),v("td",[t._v("Key in the Merkle tree that this proof is for.")]),t._v(" "),v("td",[t._v("2")])]),t._v(" "),v("tr",[v("td",[t._v("data")]),t._v(" "),v("td",[t._v("bytes")]),t._v(" "),v("td",[t._v("Encoded Merkle proof for the key.")]),t._v(" "),v("td",[t._v("3")])])])])])]),t._v(" "),v("h3",{attrs:{id:"snapshot"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#snapshot"}},[t._v("#")]),t._v(" Snapshot")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("Fields")]),t._v(":")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Field Number")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("height")]),t._v(" "),v("td",[t._v("uint64")]),t._v(" "),v("td",[t._v("The height at which the snapshot was taken (after commit).")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("format")]),t._v(" "),v("td",[t._v("uint32")]),t._v(" "),v("td",[t._v("An application-specific snapshot format, allowing applications to version their snapshot data format and make backwards-incompatible changes. Tendermint does not interpret this.")]),t._v(" "),v("td",[t._v("2")])]),t._v(" "),v("tr",[v("td",[t._v("chunks")]),t._v(" "),v("td",[t._v("uint32")]),t._v(" "),v("td",[t._v("The number of chunks in the snapshot. Must be at least 1 (even if empty).")]),t._v(" "),v("td",[t._v("3")])]),t._v(" "),v("tr",[v("td",[t._v("hash")]),t._v(" "),v("td",[t._v("bytes")]),t._v(" "),v("td",[t._v("TAn arbitrary snapshot hash. Must be equal only for identical snapshots across nodes. Tendermint does not interpret the hash, it only compares them.")]),t._v(" "),v("td",[t._v("3")])]),t._v(" "),v("tr",[v("td",[t._v("metadata")]),t._v(" "),v("td",[t._v("bytes")]),t._v(" "),v("td",[t._v("Arbitrary application metadata, for example chunk hashes or other verification data.")]),t._v(" "),v("td",[t._v("3")])])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Usage")]),t._v(":")]),t._v(" "),v("ul",[v("li",[t._v("Used for state sync snapshots, see "),v("RouterLink",{attrs:{to:"/spec/abci/apps.html#state-sync"}},[t._v("separate section")]),t._v(" for details.")],1),t._v(" "),v("li",[t._v("A snapshot is considered identical across nodes only if "),v("em",[t._v("all")]),t._v(" fields are equal (including\n"),v("code",[t._v("Metadata")]),t._v("). Chunks may be retrieved from all nodes that have the same snapshot.")]),t._v(" "),v("li",[t._v("When sent across the network, a snapshot message can be at most 4 MB.")])])])])],1)}),[],!1,null,null,null);e.default=_.exports}}]);